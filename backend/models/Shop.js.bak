const mongoose = require('mongoose');

const reviewSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    rating: {
        type: Number,
        required: true,
        min: 1,
        max: 5
    },
    comment: {
        type: String,
        required: true
    },
    images: [{
        type: String
    }],
    createdAt: {
        type: Date,
        default: Date.now
    }
});

const availabilitySchema = new mongoose.Schema({
    day: {
        type: String,
        enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        required: true
    },
    openTime: {
        type: String,
        required: true
    },
    closeTime: {
        type: String,
        required: true
    },
    isOpen: {
        type: Boolean,
        default: true
    }
});

const priceRangeSchema = new mongoose.Schema({
    category: {
        type: String,
        required: true
    },
    minPrice: {
        type: Number,
        required: true
    },
    maxPrice: {
        type: Number,
        required: true
    }
});

const analyticsSchema = new mongoose.Schema({
    views: {
        type: Number,
        default: 0
    },
    favorites: {
        type: Number,
        default: 0
    },
    reviews: {
        type: Number,
        default: 0
    },
    averageRating: {
        type: Number,
        default: 0
    },
    lastUpdated: {
        type: Date,
        default: Date.now
    }
});

const shopSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    owner: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    phone: {
        type: String,
        required: true
    },
    type: {
        type: String,
        enum: ['feed', 'equipment', 'medicine', 'general'],
        required: true
    },
    description: String,
    location: {
        type: {
            type: String,
            enum: ['Point'],
            default: 'Point'
        },
        coordinates: {
            type: [Number],
            default: [0, 0]
        }
    },
    address: {
        street: String,
        city: String,
        state: String,
        country: String,
        zipCode: String
    },
    openingHours: [{
        day: {
            type: String,
            enum: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
            required: true
        },
        open: {
            type: String,
            required: true
        },
        close: {
            type: String,
            required: true
        },
        isClosed: {
            type: Boolean,
            default: false
        }
    }],
    products: [{
        name: {
            type: String,
            required: true
        },
        description: String,
        price: {
            type: Number,
            required: true
        },
        category: {
            type: String,
            required: true
        },
        stock: {
            type: Number,
            default: 0
        },
        unit: {
            type: String,
            required: true
        },
        image: String,
        isAvailable: {
            type: Boolean,
            default: true
        }
    }],
    rating: {
        average: {
            type: Number,
            default: 0
        },
        count: {
            type: Number,
            default: 0
        }
    },
    reviews: [{
        userId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'User'
        },
        rating: {
            type: Number,
            required: true,
            min: 1,
            max: 5
        },
        comment: String,
        date: {
            type: Date,
            default: Date.now
        }
    }],
    isVerified: {
        type: Boolean,
        default: false
    },
    isOpen: {
        type: Boolean,
        default: true
    },
    paymentMethods: [{
        type: String,
        enum: ['cash', 'credit_card', 'debit_card', 'mobile_payment']
    }],
    deliveryOptions: {
        hasDelivery: {
            type: Boolean,
            default: false
        },
        deliveryRadius: Number,
        deliveryFee: Number
    },
    images: [String],
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
});

// Indexes
shopSchema.index({ email: 1 });
shopSchema.index({ location: '2dsphere' });
shopSchema.index({ type: 1 });
shopSchema.index({ isOpen: 1 });
shopSchema.index({ 'products.category': 1 });

// Methods
shopSchema.methods.calculateAverageRating = function() {
    if (this.reviews.length === 0) return 0;
    const total = this.reviews.reduce((sum, review) => sum + review.rating, 0);
    return total / this.reviews.length;
};

shopSchema.methods.isOpenAt = function(date) {
    const day = date.toLocaleLowerCase().split(',')[0];
    const time = date.toLocaleTimeString('en-US', { hour12: false });
    
    const schedule = this.openingHours.find(h => h.day === day);
    if (!schedule || schedule.isClosed) return false;

    return time >= schedule.open && time <= schedule.close;
};

shopSchema.methods.addReview = async function(userId, rating, comment) {
    this.reviews.push({
        userId,
        rating,
        comment
    });

    // Update average rating
    this.rating.average = this.calculateAverageRating();
    this.rating.count = this.reviews.length;

    await this.save();
};

shopSchema.methods.updateStock = async function(productId, quantity) {
    const product = this.products.id(productId);
    if (!product) throw new Error('Product not found');

    product.stock += quantity;
    if (product.stock < 0) throw new Error('Insufficient stock');

    product.isAvailable = product.stock > 0;
    await this.save();
};

// Pre-save middleware
shopSchema.pre('save', function(next) {
    this.updatedAt = new Date();
    next();
});

const Shop = mongoose.model('Shop', shopSchema);

module.exports = Shop; 